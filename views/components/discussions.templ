package components

import "fmt"

type DiscussionFormProps struct {
	ResourceUrl string
	Categories  CategoriesProps
}

templ DiscussionForm(dfp DiscussionFormProps) {
	<form
		x-data
		id="discussion-form"
		class="my-8 grid grid-flow-row grid-cols-1 grid-rows-[repeat(4,_auto)] gap-y-4 px-4"
	>
		<!-- Discussion Category selection -->
		<input
			id="category-filter"
			name="category-filter"
			type="text"
			class="input input-bordered w-full"
			placeholder="Filter categories in select field"
			_="on keyup show <option /> in #category-select when its innerHTML contains my value"
		/>
		<label class="form-control w-full">
			<select class="select select-bordered" name="categories" id="category-select">
				<option disabled selected>Category</option>
				for _, c := range dfp.Categories {
					<option value={ fmt.Sprintf("%d", c.ID) }>
						{ c.Name }
					</option>
				}
			</select>
		</label>
		<!-- End of Discussion Category selection -->
		<div class="relative flex h-12 flex-col gap-2">
			<label for="title" class="absolute -top-2 left-2 bg-base-100 px-2 text-xs">
				Title
			</label>
			<input
				id="title"
				type="text"
				name="title"
				class="input input-bordered flex grow items-center"
				hx-get="/discussions/title"
				hx-target="next"
				hx-trigger="load delay:1s, change, keyup delay:200ms changed"
			/>
			<div></div>
		</div>
		<div class="prose relative row-span-2 flex h-96 !max-w-none flex-col gap-2">
			<textarea
				type="text"
				id="description"
				name="description"
				class="flex grow resize-none"
				x-data="{ editor: null }"
				x-init="
          editor = new EasyMDE({element: $el, maxHeight: '16rem', toolbarTips: false });
          editor.codemirror.on('change', () => {
            $el.value = editor.value();
            $el.dispatchEvent(new Event('input'));
          });
        "
				hx-get="/discussions/description"
				hx-target="#discussion-description-err-container"
				hx-trigger="load delay:1s, input delay:200ms"
			></textarea>
			<div id="discussion-description-err-container"></div>
		</div>
		<div class="relative flex h-12 flex-col gap-2">
			<label for="url" class="absolute -top-2 left-2 bg-base-100 px-2 text-xs">
				Url
			</label>
			<input
				class="input input-bordered flex grow items-center"
				type="url"
				id="url"
				name="url"
				value={ fmt.Sprintf("%s", dfp.ResourceUrl) }
				hx-get="/discussions/url"
				hx-target="next"
				hx-trigger="load delay:1s, change, keyup delay:200ms changed"
			/>
			<div></div>
		</div>
		<button
			id="discussion-form-submit-btn"
			type="button"
			class="btn"
			hx-post="/discussions/create"
			hx-trigger="confirmed"
			hx-select-oob="#discussion-form:outerHTML"
			if token, ok := ctx.Value("csrf").(string); ok {
				hx-headers={ TokenCSRF(token) }
			}
			@click="
        sweetConfirm($el, {
          title: 'Create new discussion?',
          showCancelButton: true,
          didOpen: () => {
            htmx.ajax('GET', '/discussions/preview', {
              target: '#preview',
              swap: 'outerHTML',
              values: htmx.values(htmx.find('form')),
            });
          },
          html: `
            <h2 class='text-center font-bold text-3xl'>Preview</h2>
            <div id='preview'>
              <span class='loading loading-dots loading-lg'></span>
            </div>
          `,
          confirmButtonText: 'Create',
        });
      "
		>
			Share
		</button>
	</form>
	<div id="discussion-errors-container"></div>
}

templ warningIcon() {
	<svg
		xmlns="http://www.w3.org/2000/svg"
		class="h-6 w-6 shrink-0 stroke-current"
		fill="none"
		viewBox="0 0 24 24"
	>
		<path
			stroke-linecap="round"
			stroke-linejoin="round"
			stroke-width="2"
			d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"
		></path>
	</svg>
}

templ DiscussionFormErrorField(message string) {
	<span
		class="absolute right-2 top-3 animate-pulse"
		_="on mouseenter toggle @hidden on next <span/> until mouseleave"
	>
		@warningIcon()
	</span>
	<span
		class="absolute -top-8 right-4 z-10 rounded-md rounded-br-xl bg-base-300 p-2"
		hidden
	>
		{ message }
	</span>
}

templ DiscussionFormErrors(messages []string) {
	Share
	<div
		id="discussion-errors-container"
		hx-swap-oob="true"
		x-data="{ open: false }"
	>
		<div
			role="alert"
			class="alert alert-error"
			x-show="open"
			x-transition:enter.duration.500ms
			x-transition:leave.duration.400ms
			x-init="
				setTimeout(() => { open = true }, 50);
				setTimeout(() => { open = false }, 3000);
			"
		>
			<svg
				xmlns="http://www.w3.org/2000/svg"
				class="h-6 w-6 shrink-0 stroke-current"
				fill="none"
				viewBox="0 0 24 24"
			>
				<path
					stroke-linecap="round"
					stroke-linejoin="round"
					stroke-width="2"
					d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z"
				></path>
			</svg>
			<span>Error! You made following mistakes:</span>
			<ul>
				for _, message := range messages {
					<li>{ fmt.Sprintf("%s", message) }</li>
				}
			</ul>
			<button
				@click="open = !open"
				class="btn btn-outline"
			>
				Hide Error
			</button>
		</div>
	</div>
}

type DiscussionCardViewModel struct {
	ImgSrc    string
	CardTitle string
}

templ DiscussionCards(dcvms []DiscussionCardViewModel, nextPage int, currentCategory string) {
	for _, dcvm := range dcvms {
		@DiscussionCard(dcvm, false)
	}
	if len(dcvms) == 9 {
		<div
			role="alert"
			class="alert shadow-lg center my-4"
			hx-get={ func() string {
                if currentCategory == "" {
                    return string(
                        templ.URL(
                            fmt.Sprintf("/discussions?page=%d", nextPage),
                        ),
                    )
                }
                return fmt.Sprintf("/discussions?page=%d&category=%s", nextPage, currentCategory)
            }() }
			hx-trigger="revealed"
			hx-swap="outerHTML"
		>
			<svg
				xmlns="http://www.w3.org/2000/svg"
				fill="none"
				viewBox="0 0 24 24"
				class="stroke-info h-6 w-6 shrink-0"
			>
				<path
					stroke-linecap="round"
					stroke-linejoin="round"
					stroke-width="2"
					d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
				></path>
			</svg>
			<div>
				<h3 class="font-bold">Loading more...</h3>
			</div>
		</div>
	}
}

templ DiscussionCard(discussionCardViewModel DiscussionCardViewModel, isPreview bool) {
	<div
		class={ "card card-compact bg-base-100 max-w-full shadow-xl mx-auto break-inside-avoid-column",
      templ.KV("pointer-events-none select-none", isPreview) }
	>
		<figure>
			<img
				src={ discussionCardViewModel.ImgSrc }
				loading="lazy"
				alt="Discussion"
				class="w-full"
			/>
		</figure>
		<div class="card-body">
			<h2 class="card-title">{ discussionCardViewModel.CardTitle }</h2>
			if !isPreview {
				<div class="card-actions justify-end">
					<button class="btn btn-primary">Discuss</button>
				</div>
			}
		</div>
	</div>
}
