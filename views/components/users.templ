package components

import "fmt"

templ Avatar(oobValue string, userID int) {
	<div
		if oobValue != "" {
			hx-swap-oob={ oobValue }
		}
		class="dropdown dropdown-end"
	>
		<div hx-get={ string(templ.URL(fmt.Sprintf("/users/%d/avatar", userID))) } hx-swap="outerHTML" hx-trigger="load"></div>
		<ul
			tabindex="0"
			class="menu menu-sm dropdown-content bg-base-100 rounded-box z-[1] mt-3 w-52 p-2 shadow"
		>
			<li>
				<a class="justify-between" href={ templ.SafeURL(fmt.Sprintf("/users/%d", userID)) }>
					Profile
				</a>
			</li>
			if false {
				<li><a>Settings</a></li>
			}
			<li>
				<button
					hx-post={ string(templ.URL(fmt.Sprintf("/users/%d/deauthenticate", userID))) }
					if token, ok := ctx.Value("csrf").(string); ok {
						hx-headers={ TokenCSRF(token) }
					}
				>
					Logout
				</button>
			</li>
		</ul>
	</div>
}

templ AvatarImg(src string) {
	<div tabindex="0" role="button" class="btn btn-ghost btn-circle avatar">
		<div class="w-10 rounded-full">
			<img
				alt="Tailwind CSS Navbar component"
				src={ src }
			/>
		</div>
	</div>
}

templ AvatarPlaceHolder() {
	<div tabindex="0" role="button" class="btn btn-ghost btn-circle avatar placeholder">
		<div class="bg-neutral text-neutral-content w-10 rounded-full">
			<span>U</span>
		</div>
	</div>
}

type EditUserFormViewModel struct {
	Id          int
	Description string
	ErrMsg      string
}

templ EditUserForm(eufvm EditUserFormViewModel) {
	<form
		id="edit-user-form"
		class="flex flex-col items-center gap-y-4"
		hx-put={
			string(
				templ.URL(
					fmt.Sprintf(
						"/users/%d",
						eufvm.Id,
					),
				),
			),
		}
		hx-disabled-elt="#update-btn"
		hx-swap="outerHTML"
		if token, ok := ctx.Value("csrf").(string); ok {
			hx-headers={ TokenCSRF(token) }
		}
	>
		if eufvm.ErrMsg != "" {
			<div role="alert" class="alert alert-error" x-data="open: false">
				<svg
					xmlns="http://www.w3.org/2000/svg"
					class="h-6 w-6 shrink-0 stroke-current"
					fill="none"
					viewBox="0 0 24 24"
					x-show="open"
					x-transition:enter.duration.500ms
					x-transition:leave.duration.400ms
					x-init="
                    setTimeout(() => { open = true }, 50);
                    setTimeout(() => { open = false }, 3000);
                "
				>
					<path
						stroke-linecap="round"
						stroke-linejoin="round"
						stroke-width="2"
						d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z"
					></path>
				</svg>
				<span>{ eufvm.ErrMsg }</span>
			</div>
		}
		<textarea
			name="description"
			class="textarea textarea-bordered"
			placeholder="Bio"
		>
			{ eufvm.Description }
		</textarea>
		<button
			id="update-btn"
			class="btn btn-outline btn-success"
		>
			Update
		</button>
	</form>
}

type ReportUserFormViewModel struct {
	UserId       int
	DiscussionId int
	CommentId    int
}

templ ReportUserForm(rufvm ReportUserFormViewModel) {
	<form
		id="report-user-form"
		class="flex flex-col items-center gap-y-4"
		hx-post={
			string(
				templ.URL(
					fmt.Sprintf(
						func() string {
							switch {
							case rufvm.DiscussionId != 0:
								return fmt.Sprintf(
									"/users/%d/report?discussionId=%d",
									rufvm.UserId, rufvm.DiscussionId,
								)
							case rufvm.CommentId != 0:
								return fmt.Sprintf(
									"/users/%d/report?commentId=%d",
									rufvm.UserId, rufvm.CommentId,
								)
							default:
								return fmt.Sprintf(
									"/users/%d/report",
									rufvm.UserId,
								)
							}
						}(),
					),
				),
			),
		}
		hx-disabled-elt="#report-btn"
		hx-swap="outerHTML"
		if token, ok := ctx.Value("csrf").(string); ok {
			hx-headers={ TokenCSRF(token) }
		}
	>
		<textarea
			name="reason"
			class="textarea textarea-bordered"
			placeholder="Report reason"
		></textarea>
		<button
			id="report-btn"
			class="btn btn-outline btn-error"
		>
			Report
		</button>
	</form>
}
