package pages

import (
	"github.com/N0tR1CH/sad/views/components"
	"github.com/N0tR1CH/sad/views/layouts"
	"fmt"
	"time"
)

templ NewDiscussionPage(dfp components.DiscussionFormProps) {
	@layouts.Base() {
		@components.Logo()
		@components.DiscussionForm(dfp)
	}
}

type DiscussionPageProps struct {
	Dvm components.DiscussionViewModel
}

templ DiscussionPage(dpp DiscussionPageProps) {
	@layouts.Base() {
		@DiscussionPageBody(dpp)
	}
}

templ DiscussionPageBody(dpp DiscussionPageProps) {
	<div>
		@components.Discussion(dpp.Dvm)
		<div class="divider"></div>
		if id, ok := ctx.Value("userID").(int); ok && id != 0 {
			@commentInput(dpp.Dvm.Id)
		}
		<section
			id="discussion-comments"
			class="space-y-2 my-4"
			hx-get={
				string(
					templ.URL(
						fmt.Sprintf(
							"/discussions/%d/comments?page=1",
							dpp.Dvm.Id,
						),
					),
				),
			}
			hx-trigger="load, getComms"
			hx-swap="innerHTML"
			if id, ok := ctx.Value("userID").(int); ok && id != 0 {
				_="
                on htmx:afterRequest
                    send refreshBtnStopSpin to #refresh-btn
                end
            "
			}
			hx-push-url="true"
		></section>
	</div>
}

templ commentInput(discussionId int) {
	<div class="flex flex-col items-start mx-2 gap-y-2">
		<textarea
			id="comment-input"
			class="textarea textarea-bordered w-full"
			name="content"
			placeholder="Write a comment..."
		></textarea>
		<div class="flex items-center">
			@CreateCommBtn(CreateCommBtnViewModel{DiscussionId: discussionId})
			@refreshBtn()
		</div>
	</div>
}

type CreateCommBtnViewModel struct {
	DiscussionId int
}

templ CreateCommBtn(ccbvm CreateCommBtnViewModel) {
	<button
		class="btn btn-primary"
		hx-post={ string(templ.URL(fmt.Sprintf("/discussions/%d/comments/create", ccbvm.DiscussionId))) }
		hx-target="#discussion-comments"
		hx-swap="afterbegin"
		hx-include="[name='content']"
		hx-trigger="click delay:200ms"
		hx-vals='js:{isReply: window.location.pathname.split("/").pop() === "reply", parentId: window.location.pathname.split("/").slice(-2, -1)[0]}'
		_="
        on htmx:afterRequest
            if event.detail.successful
                set #comment-input.value to ''
                runToast('success', 'Comment was succesfully inserted into the dicussion')
            else
                runToast('error', 'Comment could not be inserted into the dicussion')
            end
        end
        "
		if token, ok := ctx.Value("csrf").(string); ok {
			hx-headers={ components.TokenCSRF(token) }
		}
	>
		Add Comment
	</button>
}

type CommentViewModel struct {
	username     string
	ctvm         commentTimeViewModel
	imgSrc       string
	content      string
	upvotes      int
	discussionId int
	commentId    int
	userId       int
}

type commentTimeViewModel struct {
	datetime string
	title    string
	content  string
}

templ Comments(
	cvms []CommentViewModel,
	discussionId int,
	page int,
	currCommCount int,
	parentId int,
) {
	<section>
		for _, cvm := range cvms {
			@Comment(cvm)
		}
	</section>
	if currCommCount > 0 {
		<div
			if parentId == 0 {
				hx-get={ string(
                    templ.URL(
                        fmt.Sprintf(
                            "/discussions/%d/comments?page=%d",
                            discussionId,
                            page,
                        ),
                    ),
                ) }
			} else {
				hx-get={ string(
                    templ.URL(
                        fmt.Sprintf(
                            "/discussions/%d/comments/reply/%d?page=%d",
                            discussionId,
                            parentId,
                            page,
                        ),
                    ),
                ) }
			}
			hx-trigger="revealed"
			hx-swap="outerHTML"
			hx-indicator="#more-comments-loading-bar"
			hx-push-url="true"
		>
			<div
				class="divider"
			></div>
			<span id="more-comments-loading-bar" class="loading loading-bars loading-lg"></span>
		</div>
	}
}

func NewCommentViewModel(
	username,
	imgSrc,
	content string,
	t time.Time,
	numUpvotes, discussionId, commentId, userId int,
) CommentViewModel {
	dayWithSuffix := func(day int) string {
		if day%100 >= 11 && 100 <= 13 {
			return fmt.Sprintf("%dth", day)
		}

		switch day % 10 {
		case 1:
			return fmt.Sprintf("%dst", day)
		case 2:
			return fmt.Sprintf("%dnd", day)
		case 3:
			return fmt.Sprintf("%drd", day)
		default:
			return fmt.Sprintf("%dth", day)
		}
	}

	ctvm := commentTimeViewModel{
		datetime: fmt.Sprintf(
			"%d-%02d-%02d",
			t.Year(), t.Month(), t.Day(),
		),
		title: fmt.Sprintf(
			"%s %s, %d",
			t.Month().String(), dayWithSuffix(t.Day()), t.Year(),
		),
		content: fmt.Sprintf(
			"%s. %d, %d",
			t.Month().String()[:3], t.Day(), t.Year(),
		),
	}
	return CommentViewModel{
		username: func() string {
			if username == "" {
				return "Guest"
			}
			return username
		}(),
		imgSrc:       imgSrc,
		ctvm:         ctvm,
		content:      content,
		upvotes:      numUpvotes,
		commentId:    commentId,
		discussionId: discussionId,
		userId:       userId,
	}
}

templ Comment(cvm CommentViewModel) {
	<article
		id={ fmt.Sprintf("discussion-comment-%d", cvm.commentId) }
		class="p-2 text-base rounded-lg"
	>
		<footer class="flex justify-between items-center mb-2">
			<div class="flex items-center">
				<p class="inline-flex items-center mr-3 text-sm text-gray-900 dark:text-white font-semibold">
					if cvm.imgSrc != "" {
						<img
							class="mr-2 w-6 h-6 rounded-full"
							src={ cvm.imgSrc }
							alt={ cvm.username }
						/>
					}
					if cvm.username == "" {
						Guest
					} else {
						{ cvm.username }
					}
				</p>
				<p class="text-sm">
					<time
						pubdate
						datetime={ cvm.ctvm.datetime }
						title={ cvm.ctvm.title }
					>{ cvm.ctvm.content }</time>
				</p>
			</div>
			<div class="flex items-center justify-center gap-x-3">
				if userID, ok := ctx.Value("userID").(int); ok && userID != 0 {
					@components.UpvoteCount(cvm.upvotes)
					@components.UpvoteCommentBtn(cvm.discussionId, cvm.commentId)
					<details class="dropdown">
						<summary class="btn m-1">
							<svg
								class="w-4 h-4"
								aria-hidden="true"
								xmlns="http://www.w3.org/2000/svg"
								fill="currentColor"
								viewBox="0 0 16 3"
							>
								<path
									d="M2 0a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3Zm6.041 0a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3ZM14 0a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3Z"
								></path>
							</svg>
						</summary>
						<ul
							class="menu dropdown-content bg-base-100 rounded-box z-[1] w-52 p-2 shadow"
						>
							<li>
								<button
									hx-get={
										string(
											templ.URL(
												fmt.Sprintf(
													"/discussions/%d/comments/%d/reply?page=1",
													cvm.discussionId,
													cvm.commentId,
												),
											),
										),
									}
									hx-target="#discussion-comments"
									hx-swap="innerHTML"
									_="on click remove @open from closest <details />"
									hx-push-url="true"
								>
									Reply
								</button>
							</li>
							if id, ok := ctx.Value("userID").(int); ok && id != 0 && id != cvm.userId {
								<li>
									<a href={ templ.SafeURL(fmt.Sprintf("/users/%d?commentId=%d", cvm.userId, cvm.discussionId)) }>
										Report
									</a>
								</li>
							}
						</ul>
					</details>
				} else {
					@components.UpvoteCount(cvm.upvotes)
					<span class="text-xl">
						if cvm.upvotes == 1 {
							upvote
						} else {
							upvotes
						}
					</span>
				}
			</div>
		</footer>
		<p>{ cvm.content }</p>
	</article>
}

templ refreshBtn() {
	<button
		id="refresh-btn"
		_="
        on click
            send getComms to #discussion-comments
            add .animate-spin on me
        end

        on refreshBtnStopSpin
            remove .animate-spin from me
        end
    "
	>
		<svg
			class="fill-primary"
			xmlns="http://www.w3.org/2000/svg"
			height="48px"
			viewBox="0 -960 960 960"
			width="48px"
		>
			<path
				d="M480-160q-134 0-227-93t-93-227q0-134 93-227t227-93q69 0 132 28.5T720-690v-110h80v280H520v-80h168q-32-56-87.5-88T480-720q-100 0-170 70t-70 170q0 100 70 170t170 70q77 0 139-44t87-116h84q-28 106-114 173t-196 67Z"
			></path>
		</svg>
	</button>
}
